# ------------------------------------------------------------------------------
# String templates for VHDL documents
#

from string import Template

VHDL_PACKAGE_TEMPLATE = Template("""
-- VHDL package for module '${json_module_name}'
-- automatically generated by HDLRegs version $hdlregs_version on $date_time

library ieee;
use ieee.std_logic_1164.all;
package $package_name is
$declarations
end package $package_name;
""")

# ------------------------------------------------------------------------------

VHDL_COMPONENT_TEMPLATE = Template("""
-- VHDL component for module '${json_module_name}'
-- automatically generated by HDLRegs version $hdlregs_version on $date_time

library ieee;

use ieee.std_logic_1164.all;
use work.$package_name.all;

entity $entity_name is
    port(
        clk     : in  std_logic;                     -- system clock
        rst     : in  std_logic;                     -- asynchronous, high-active
        addr    : in  std_logic_vector(31 downto 0); -- read/write address
        cs      : in  std_logic;                     -- chip select
        rnw     : in  std_logic;                     -- read (1) or write (0)
        datain  : in  std_logic_vector(31 downto 0); -- write data
        dataout : out std_logic_vector(31 downto 0); -- read data
        --
        regs2user : out t_regs2user; -- register file -> user logic
        user2regs : in t_user2regs -- user logic -> register file
    );
end entity $entity_name;

architecture RTL of $entity_name is
$signal_declarations
begin
$register_write_proc
$register_read_proc
$concurrent_signal_assignments
end architecture RTL;

""")
