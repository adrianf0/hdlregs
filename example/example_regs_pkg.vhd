
-- VHDL package for module 'example_regs_pkg'
-- automatically generated by HDLRegs version 0.6 on 2019-03-11 18:06

library ieee;
use ieee.std_logic_1164.all;
package example_regs_pkg is
    constant ADDR_VERSION : std_logic_vector(31 downto 0) := x"00000000";
    constant ADDR_CONTROL : std_logic_vector(31 downto 0) := x"00000100";
    constant EXAMPLE_REGS_BASEADDR : std_logic_vector(31 downto 0) := ADDR_VERSION; -- lowest register address
    constant EXAMPLE_REGS_HIGHADDR : std_logic_vector(31 downto 0) := ADDR_CONTROL; -- highest register address

    -- Field 'high' of register 'version'
    constant OFFSET_VERSION_HIGH : natural := 0;
    constant WIDTH_VERSION_HIGH : natural := 8;
    constant MASK_VERSION_HIGH : std_logic_vector(31 downto 0) := x"000000FF";

    -- Field 'low' of register 'version'
    constant OFFSET_VERSION_LOW : natural := 8;
    constant WIDTH_VERSION_LOW : natural := 8;
    constant MASK_VERSION_LOW : std_logic_vector(31 downto 0) := x"0000FF00";

    -- Field 'reset' of register 'control'
    constant OFFSET_CONTROL_RESET : natural := 31;
    constant WIDTH_CONTROL_RESET : natural := 1;
    constant MASK_CONTROL_RESET : std_logic_vector(31 downto 0) := x"80000000";

    -- Field 'done' of register 'control'
    constant OFFSET_CONTROL_DONE : natural := 1;
    constant WIDTH_CONTROL_DONE : natural := 1;
    constant MASK_CONTROL_DONE : std_logic_vector(31 downto 0) := x"00000002";

    -- Field 'start' of register 'control'
    constant OFFSET_CONTROL_START : natural := 0;
    constant WIDTH_CONTROL_START : natural := 1;
    constant MASK_CONTROL_START : std_logic_vector(31 downto 0) := x"00000001";

    -- Field 'high' of register 'version' (read-only)
    type t_version_high is record
        value : std_logic_vector(WIDTH_VERSION_HIGH - 1 downto 0);
        strobe : std_logic;
    end record;

    -- Field 'low' of register 'version' (read-only)
    type t_version_low is record
        value : std_logic_vector(WIDTH_VERSION_LOW - 1 downto 0);
        strobe : std_logic;
    end record;

    -- Field 'reset' of register 'control' (read-write)
    type t_control_reset is record
        value : std_logic_vector(WIDTH_CONTROL_RESET - 1 downto 0);
        strobe : std_logic;
    end record;

    -- Field 'done' of register 'control' (read-only)
    type t_control_done is record
        value : std_logic_vector(WIDTH_CONTROL_DONE - 1 downto 0);
        strobe : std_logic;
    end record;

    -- Field 'start' of register 'control' (write-only)
    type t_control_start is record
        value : std_logic_vector(WIDTH_CONTROL_START - 1 downto 0);
        strobe : std_logic;
    end record;

    -- Register 'version'
    type t_version_user2regs is record
        high : t_version_high;
        low : t_version_low;
    end record;

    -- Register 'control'
    type t_control_user2regs is record
        done : t_control_done;
    end record;

    -- Register 'control'
    type t_control_regs2user is record
        reset : t_control_reset;
        start : t_control_start;
    end record;

    -- User-logic -> register file interface
    type t_user2regs is record
        version: t_version_user2regs;
        control: t_control_user2regs;
    end record;

    -- Register file -> user-logic interface
    type t_regs2user is record
        control: t_control_regs2user;
    end record;

end package example_regs_pkg;
